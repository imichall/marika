-- Create table for ticket orders
CREATE TABLE ticket_orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    concert_id BIGINT REFERENCES concerts(id) ON DELETE CASCADE,
    customer_name TEXT NOT NULL,
    customer_email TEXT NOT NULL,
    ticket_count INTEGER NOT NULL CHECK (ticket_count > 0 AND ticket_count <= 10),
    total_price DECIMAL(10,2) NOT NULL,
    payment_status TEXT NOT NULL DEFAULT 'pending' CHECK (payment_status IN ('pending', 'completed', 'cancelled')),
    variable_symbol TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Enable RLS
ALTER TABLE ticket_orders ENABLE ROW LEVEL SECURITY;

-- Create policy for inserting orders (anyone can create an order)
CREATE POLICY "Anyone can create an order"
ON ticket_orders FOR INSERT
TO public
WITH CHECK (true);

-- Create policy for viewing own orders (based on email)
CREATE POLICY "Users can view their own orders"
ON ticket_orders FOR SELECT
TO public
USING (customer_email = auth.jwt()->>'email');

-- Create policy for admins to view all orders
CREATE POLICY "Admins can view all orders"
ON ticket_orders FOR SELECT
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM admin_users
        WHERE email = auth.jwt()->>'email'
    )
);

-- Create policy for admins to update orders
CREATE POLICY "Admins can update orders"
ON ticket_orders FOR UPDATE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM admin_users
        WHERE email = auth.jwt()->>'email'
    )
)
WITH CHECK (
    EXISTS (
        SELECT 1 FROM admin_users
        WHERE email = auth.jwt()->>'email'
    )
);

-- Create function to update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger for updating updated_at
CREATE TRIGGER update_ticket_orders_updated_at
    BEFORE UPDATE ON ticket_orders
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();